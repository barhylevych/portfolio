{"version":3,"sources":["immortal/actions_immortals.js","redusers/reducer.js","store/store.js","serviceWorker.ts","actions/action.js","immortal/I18n.js","components/LeftSide.jsx","connectors/LeftSideConnector.js","components/RightSide.jsx","connectors/RightSideConnector.js","components/index.jsx","index.tsx"],"names":["GET_DATE","GET_WEATHER","initialState","weather","date","getters","state","type","push","moment","rootReducer","combineReducers","store","createStore","Boolean","window","location","hostname","match","getDate","getWeather","LeftSide","props","console","log","className","mapDispatchToProps","connect","RightSide","useState","click","setClick","onClick","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4KAAaA,EAAW,WACXC,EAAc,c,yjBCC3B,IAAMC,EAAe,CACjBC,QAAS,GACTC,KAAM,IAgBKC,MAbf,WAAiD,IAA/BC,EAA8B,uDAAtBJ,EACtB,QAD4C,wCAC7BK,MACX,KAAKN,EACD,IAAME,EAAU,KAAIG,GAAOH,QAAQK,KAAK,SACxC,OAAO,EAAP,GAAWF,EAAX,CAAkBH,YACtB,KAAKH,EACD,IAAMS,EAAS,KAAIH,GAAOF,KAAKI,KAAK,cACpC,OAAO,EAAP,GAAWF,EAAX,CAAkBG,WACtB,QACI,OAAOH,ICZbI,EAAcC,YAAgBN,GAIrBO,EAFFC,YAAYH,G,cCMLI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MChBC,SAASC,IACd,MAAO,CAAEZ,KAAMP,GAGV,SAASoB,IACd,MAAO,CAAEb,KAAMN,GCPV,ICeQoB,EAVE,SAACC,GAGd,OAFAC,QAAQC,IAAIF,EAAMnB,SAGd,yBAAKsB,UAAW,YACZ,+BDVS,4LEMfC,EAAqB,CACvBvB,QAASiB,IACThB,KAAMe,KAGKQ,cAAQ,KAAMD,EAAdC,CAAkCN,G,yBCOlCO,EAZG,WAAO,IAAD,EAEMC,oBAAS,GAFf,mBAEbC,EAFa,KAENC,EAFM,KAIpB,OACI,yBAAKN,UAAW,aACZ,kBAAC,IAAD,CAAQO,QAAS,WAAOD,GAAUD,KAAlC,eACCA,GAAS,+BHZH,iLIKbJ,EAAqB,CACvBvB,QAASiB,IACThB,KAAMe,KAGKQ,cAAQ,KAAKD,EAAbC,CAAiCC,GCEjCK,EATF,WACT,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCZC,IAASC,OACL,kBAAC,IAAD,CAAUvB,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,QAGNwB,SAASC,eAAe,SR0HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7458dee8.chunk.js","sourcesContent":["export const GET_DATE = 'GET_DATE'\nexport const GET_WEATHER = 'GET_WEATHER'\n","import {GET_WEATHER, GET_DATE} from \"../immortal/actions_immortals\";\r\n\r\nconst initialState = {\r\n    weather: [],\r\n    date: [],\r\n}\r\n\r\nfunction getters (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            const weather = {...state}.weather.push('hello')\r\n            return {...state, weather}\r\n        case GET_DATE:\r\n            const moment = {...state}.date.push('11.22.2019')\r\n            return {...state, moment}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default getters\r\n","import { createStore } from 'redux'\nimport { combineReducers} from \"redux\";\nimport getters from \"../redusers/reducer\";\n\nconst rootReducer = combineReducers(getters)\n\nconst store =createStore(rootReducer)\n\nexport default store\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_DATE, GET_WEATHER } from \"../immortal/actions_immortals\";\n\nexport function getDate() {\n  return { type: GET_DATE }\n}\n\nexport function getWeather() {\n  return { type: GET_WEATHER }\n}\n\n","export const title = 'Портфолио Баргилевича Олександра'\nexport const joke ='Я просто хороший, купите мне пива :)'\n\n","import React from \"react\";\r\nimport * as i18n from '../immortal/I18n'\r\nimport '../styles/LeftSideStyle.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst LeftSide = (props) => {\r\n    console.log(props.weather)\r\n\r\n    return(\r\n        <div className={'LeftSide'}>\r\n            <p> {i18n.title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeftSide\r\n\r\nLeftSide.propTypes = {\r\n    weather: PropTypes.array,\r\n    data: PropTypes.array\r\n  }\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport '../styles/LeftSideStyle.css'\r\nimport {getDate, getWeather} from \"../actions/action\";\r\nimport LeftSide from \"../components/LeftSide\";\r\n\r\nconst mapDispatchToProps = {\r\n    weather: getWeather(),\r\n    date: getDate()\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(LeftSide)\r\n","import React, {useState} from \"react\";\r\nimport * as i18n from '../immortal/I18n'\r\nimport '../styles/RightSideStyle.css'\r\nimport {Button} from 'antd'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst RightSide = () => {\r\n\r\n    const [click, setClick] = useState(false)\r\n\r\n    return (\r\n        <div className={'RightSide'}>\r\n            <Button onClick={() => {setClick(!click)}}> Press me! </Button>\r\n            {click && <a> {i18n.joke}</a>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RightSide\r\n\r\nRightSide.propTypes = {\r\n    weather: PropTypes.array,\r\n    data: PropTypes.array\r\n  }\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport '../styles/LeftSideStyle.css'\r\nimport {getDate, getWeather} from \"../actions/action\";\r\nimport RightSide from \"../components/RightSide\";\r\n\r\nconst mapDispatchToProps = {\r\n    weather: getWeather(),\r\n    date: getDate()\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(RightSide)\r\n","import React from 'react'\nimport LeftSide from \"../connectors/LeftSideConnector\";\nimport RightSide from \"../connectors/RightSideConnector\";\n\nconst App  = () => {\n    return (\n        <>\n            <LeftSide/>\n            <RightSide/>\n        </>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from '../src/store/store'\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/index'\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}