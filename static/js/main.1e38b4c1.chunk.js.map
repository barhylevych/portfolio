{"version":3,"sources":["immortal/actions_immortals.js","redusers/reducer.js","store/store.js","serviceWorker.ts","actions/action.js","immortal/I18n.js","components/LeftSide.jsx","connectors/LeftSideConnector.js","components/GoogleMap.jsx","components/RightSide.jsx","connectors/RightSideConnector.js","components/index.jsx","index.tsx"],"names":["SHOW_LOADING","GET_WEATHER","STOP_LOADING","initialState","weather","loading","keyAPI","gettersFromAPI","state","type","stateCopy_1","stateCopy_2","store","createStore","rootReducer","Boolean","window","location","hostname","match","getWeather","i18n","TITLE","JOKE","NAME","NAME_TITLE","SURNAME","SURNAME_TITLE","PATRONYMIC","PATRONYMIC_TITLE","ACTIVITY_TITLE","ACTIVITY","CONTACT","SOCIAL","IMAGE","LeftSide","props","className","onClick","src","alt","map","element","activity","mapDispatchToProps","startLoading","connect","GoogleMap","size","center","zoom","Map","ReactMapboxGl","accessToken","style","containerStyle","height","width","id","layout","coordinates","defaultProps","lat","lng","RightSide","useState","click","setClick","console","log","ghost","dispatch","App","icon","faCode","faNewspaper","faShareAlt","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e38b4c1.chunk.js","sourcesContent":["export const SHOW_LOADING = 'SHOW_LOADING'\nexport const GET_WEATHER = 'GET_WEATHER'\nexport const STOP_LOADING = 'STOP_LOADING'\n","import {GET_WEATHER, SHOW_LOADING, STOP_LOADING} from \"../immortal/actions_immortals\";\n\nconst initialState = {\n    weather: {},\n    loading: false,\n    keyAPI: 'pk.eyJ1IjoiYmFyaHlsZXZ5Y2giLCJhIjoiY2szMWVkNXJpMDdsaDNsbWpscjZveHczaSJ9.iz0Tb0UTzZ1_Rt0chVmooA',\n}\n\nfunction gettersFromAPI (state = initialState, action) {\n    switch (action.type) {\n        case GET_WEATHER:\n            return {...state}\n        case SHOW_LOADING:\n            const stateCopy_1 = {...state}.loading = true\n            return {...stateCopy_1}\n        case STOP_LOADING:\n            const stateCopy_2 = {...state}.loading = false\n            return {...stateCopy_2}\n        default:\n            return state\n    }\n}\n\nexport default gettersFromAPI\n","import {createStore} from 'redux'\nimport rootReducer from \"../redusers/reducer\";\n\nconst store = createStore(rootReducer)\n\nexport default store\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GET_WEATHER, STOP_LOADING, SHOW_LOADING} from \"../immortal/actions_immortals\";\n\nexport function stopLoading() {\n    return {type: STOP_LOADING}\n}\n\nexport function startLoading() {\n    return {type: SHOW_LOADING}\n}\n\nexport function getWeather() {\n    return {type: GET_WEATHER}\n}\n\n","export const i18n = {\n    TITLE : 'Portfolio',\n    JOKE : 'just buy me beer :)',\n    NAME : 'Oleksandr',\n    NAME_TITLE : 'Name: ',\n    SURNAME : 'Barhylevych',\n    SURNAME_TITLE : 'Surname: ',\n    PATRONYMIC : 'Anatolievich',\n    PATRONYMIC_TITLE : 'Patronymic: ',\n    ACTIVITY_TITLE : 'Activity: ',\n    ACTIVITY : 'WEB React developer',\n    CONTACT: 'Contact',\n    SOCIAL: 'Social networks',\n    IMAGE : 'https://instagram.fiev12-1.fna.fbcdn.net/vp/7287cd1e2074a673468fbac3499a7979/5E535EA3/t51.2885-15/e35/45376051_496337464219004_4350957362950019205_n.jpg?_nc_ht=instagram.fiev12-1.fna.fbcdn.net&_nc_cat=108',\n}\n\n\n\n","import React from \"react\";\nimport {i18n} from '../immortal/I18n'\nimport '../styles/LeftSideStyle.sass'\nimport PropTypes from 'prop-types'\nimport { Icon } from \"antd\"\n\n\nconst bodyInfo =( activity ) => {\n    return (\n        <div className={'left-side-text'}>\n        <span>{i18n[activity]}</span>\n        </div>\n    )\n}\n\nconst LeftSide = (props) => {\n    return (\n        <div className={'left-side'} onClick={props.weather}>\n            <img className={'left-side-img'} src={i18n.IMAGE} alt={'hell'}/>\n            {['NAME', 'SURNAME', 'ACTIVITY'].map((element)=> bodyInfo(element))}\n            <Icon type=\"home\"/><span>Kiev</span><br/>\n            <Icon type=\"code\" /><span>React js</span><br/>\n            <Icon type=\"instagram\" />\n            <Icon type=\"github\" />\n        </div>\n    )\n}\n\nLeftSide.propTypes = {\n    weather: PropTypes.func,\n    data: PropTypes.array,\n    startLoading: PropTypes.func,\n}\n\nexport default LeftSide\n","import React from \"react\";\nimport {connect} from \"react-redux\";\n//import '../styles/LeftSideStyle.sass'\nimport { getWeather, startLoading } from \"../actions/action\";\nimport LeftSide from \"../components/LeftSide\";\n\nconst mapStateToProps = (state) => ({\n    weather: state.weather\n})\n\nconst mapDispatchToProps = ({\n    getWeather,\n    startLoading,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftSide)\n","import React from \"react\";\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport PropTypes from 'prop-types'\n\nconst GoogleMap = ({size,center, zoom, ...props}) => {\n    const Map = ReactMapboxGl({\n        accessToken: props.keyAPI});\nreturn(\n    <Map\n        style=\"mapbox://styles/mapbox/streets-v9\"\n        containerStyle={{\n            height: size.height,\n            width: size.width\n        }}\n    >\n        <Layer type=\"symbol\" id=\"marker\" layout={{'icon-image': 'marker-15'}}>\n            <Feature coordinates={[-0.481747846041145, 51.3233379650232]}/>\n        </Layer>\n    </Map>\n)}\n\nGoogleMap.defaultProps = {\n    center: {\n        lat: 59.95,\n        lng: 320.33\n    },\n    zoom: 11,\n    size: {\n        height: '300px',\n        width: '300px'\n    }\n}\n\nGoogleMap.propTypes = {\n    keyAPI: PropTypes.string\n}\n\nexport default GoogleMap","import React, {useState} from \"react\";\nimport {i18n} from '../immortal/I18n'\n//import '../styles/RightSideStyle.css'\nimport {Button} from 'antd'\nimport PropTypes from 'prop-types'\nimport GoogleMap from '../components/GoogleMap'\n\nconst RightSide = (props) => {\n\n    const [click, setClick] = useState(false)\n    console.log(props.keyAPI)\n    return (\n        <div className={'right-side'}>\n            <Button ghost onClick={() => {\n                setClick(!click)\n            }}> Press me! </Button>\n            {click && <p> {i18n.JOKE}</p>}\n            <GoogleMap\n                keyAPI={props.keyAPI}/>\n        </div>\n    )\n}\n\nRightSide.propTypes = {\n    weather: PropTypes.array,\n    keyAPI: PropTypes.string,\n}\n\nexport default RightSide\n","import React from \"react\";\nimport {connect} from \"react-redux\";\n//import '../styles/LeftSideStyle.css'\nimport {getWeather} from \"../actions/action\";\nimport RightSide from \"../components/RightSide\";\n\nconst mapStateToProps = (state) => ({\n    keyAPI: state.keyAPI\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      weather: () => dispatch(getWeather())\n  }\n}\n\nexport default connect(mapStateToProps ,mapDispatchToProps)(RightSide)\n","import React from 'react'\nimport LeftSide from \"../connectors/LeftSideConnector\";\nimport RightSide from \"../connectors/RightSideConnector\";\nimport '../styles/Header.sass'\nimport {i18n} from '../immortal/I18n'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport { faCode, faNewspaper, faShareAlt } from '@fortawesome/free-solid-svg-icons'\n\nconst App = () => {\n    return (\n        <div className={'project'}>\n            <header>\n                <p className={'logo'}> <FontAwesomeIcon icon={faCode}/>{i18n.SURNAME} </p>\n                <nav>\n                    <ul className={'header'}>\n                        <li><p> {<FontAwesomeIcon icon={faNewspaper}/>}{i18n.CONTACT} </p></li>\n                        <li><p> {<FontAwesomeIcon icon={faShareAlt}/>}</p></li>\n                    </ul>\n                </nav>\n            </header>\n            <LeftSide/>\n            <RightSide/>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from '../src/store/store'\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.sass';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/index'\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}