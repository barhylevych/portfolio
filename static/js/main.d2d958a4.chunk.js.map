{"version":3,"sources":["immortal/actions_immortals.js","redusers/reducer.js","store/store.js","serviceWorker.ts","actions/action.js","immortal/I18n.js","components/LeftSide.jsx","connectors/LeftSideConnector.js","components/GoogleMap.jsx","components/RightSide.jsx","connectors/RightSideConnector.js","components/index.jsx","index.tsx"],"names":["SHOW_LOADING","GET_WEATHER","STOP_LOADING","initialState","weather","loading","keyAPI","gettersFromAPI","state","type","stateCopy_1","stateCopy_2","store","createStore","rootReducer","Boolean","window","location","hostname","match","getWeather","i18n","TITLE","JOKE","NAME","NAME_TITLE","SURNAME","SURNAME_TITLE","PATRONYMIC","PATRONYMIC_TITLE","ACTIVITY_TITLE","ACTIVITY","IMAGE","LeftSide","props","className","onClick","src","alt","map","element","activity","mapDispatchToProps","connect","GoogleMap","size","center","zoom","Map","ReactMapboxGl","accessToken","style","containerStyle","height","width","id","layout","coordinates","defaultProps","lat","lng","RightSide","useState","click","setClick","console","log","ghost","dispatch","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2d958a4.chunk.js","sourcesContent":["export const SHOW_LOADING = 'SHOW_LOADING'\r\nexport const GET_WEATHER = 'GET_WEATHER'\r\nexport const STOP_LOADING = 'STOP_LOADING'\r\n","import {GET_WEATHER, SHOW_LOADING, STOP_LOADING} from \"../immortal/actions_immortals\";\r\n\r\nconst initialState = {\r\n    weather: {},\r\n    loading: false,\r\n    keyAPI: 'pk.eyJ1IjoiYmFyaHlsZXZ5Y2giLCJhIjoiY2szMWVkNXJpMDdsaDNsbWpscjZveHczaSJ9.iz0Tb0UTzZ1_Rt0chVmooA',\r\n}\r\n\r\nfunction gettersFromAPI (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            return {...state}\r\n        case SHOW_LOADING:\r\n            const stateCopy_1 = {...state}.loading = true\r\n            return {...stateCopy_1}\r\n        case STOP_LOADING:\r\n            const stateCopy_2 = {...state}.loading = false\r\n            return {...stateCopy_2}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default gettersFromAPI\r\n","import {createStore} from 'redux'\r\nimport rootReducer from \"../redusers/reducer\";\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {GET_WEATHER, STOP_LOADING, SHOW_LOADING} from \"../immortal/actions_immortals\";\r\n\r\nexport function stopLoading() {\r\n    return {type: STOP_LOADING}\r\n}\r\n\r\nexport function startLoading() {\r\n    return {type: SHOW_LOADING}\r\n}\r\n\r\nexport function getWeather() {\r\n    return {type: GET_WEATHER}\r\n}\r\n\r\n","export const i18n = {\r\n    TITLE : 'Portfolio',\r\n    JOKE : 'just buy me beer :)',\r\n    NAME : 'Oleksandr',\r\n    NAME_TITLE : 'Name: ',\r\n    SURNAME : 'Barhylevych',\r\n    SURNAME_TITLE : 'Surname: ',\r\n    PATRONYMIC : 'Anatolievich',\r\n    PATRONYMIC_TITLE : 'Patronymic: ',\r\n    ACTIVITY_TITLE : 'Activity: ',\r\n    ACTIVITY : 'WEB React developer',\r\n    IMAGE : 'https://instagram.fiev12-1.fna.fbcdn.net/vp/7287cd1e2074a673468fbac3499a7979/5E535EA3/t51.2885-15/e35/45376051_496337464219004_4350957362950019205_n.jpg?_nc_ht=instagram.fiev12-1.fna.fbcdn.net&_nc_cat=108',\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {i18n} from '../immortal/I18n'\r\nimport '../styles/LeftSideStyle.css'\r\nimport PropTypes from 'prop-types'\r\nimport { Icon } from \"antd\"\r\n\r\n\r\nconst bodyInfo =( activity ) => {\r\n    const title = activity + '_TITLE'\r\n    return (\r\n        <div className={'left-side-text'}>\r\n        <span>{i18n[activity]}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LeftSide = (props) => {\r\n    return (\r\n        <div className={'left-side'} onClick={props.weather}>\r\n            <img className={'left-side-img'} src={i18n.IMAGE} alt={'hell'}/>\r\n            {['NAME', 'SURNAME', 'ACTIVITY'].map((element)=> bodyInfo(element))}\r\n            <Icon type=\"home\" /><span>Kiev</span><br/>\r\n            <Icon type=\"code\" /><span>React js</span><br/>\r\n            <Icon type=\"instagram\" />\r\n            <Icon type=\"github\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nLeftSide.propTypes = {\r\n    weather: PropTypes.func,\r\n    data: PropTypes.array,\r\n}\r\n\r\nexport default LeftSide\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport '../styles/LeftSideStyle.css'\r\nimport {getWeather} from \"../actions/action\";\r\nimport LeftSide from \"../components/LeftSide\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    weather: state.weather\r\n})\r\n\r\nconst mapDispatchToProps = ({\r\n    weather: () => getWeather(),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftSide)\r\n","import React from \"react\";\r\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GoogleMap = ({size,center, zoom, ...props}) => {\r\n    const Map = ReactMapboxGl({\r\n        accessToken: props.keyAPI});\r\nreturn(\r\n    <Map\r\n        style=\"mapbox://styles/mapbox/streets-v9\"\r\n        containerStyle={{\r\n            height: size.height,\r\n            width: size.width\r\n        }}\r\n    >\r\n        <Layer type=\"symbol\" id=\"marker\" layout={{'icon-image': 'marker-15'}}>\r\n            <Feature coordinates={[-0.481747846041145, 51.3233379650232]}/>\r\n        </Layer>\r\n    </Map>\r\n)}\r\n\r\nGoogleMap.defaultProps = {\r\n    center: {\r\n        lat: 59.95,\r\n        lng: 320.33\r\n    },\r\n    zoom: 11,\r\n    size: {\r\n        height: '300px',\r\n        width: '300px'\r\n    }\r\n}\r\n\r\nGoogleMap.propTypes = {\r\n    keyAPI: PropTypes.string\r\n}\r\n\r\nexport default GoogleMap","import React, {useState} from \"react\";\r\nimport {i18n} from '../immortal/I18n'\r\nimport '../styles/RightSideStyle.css'\r\nimport {Button} from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport GoogleMap from '../components/GoogleMap'\r\n\r\nconst RightSide = (props) => {\r\n\r\n    const [click, setClick] = useState(false)\r\n    console.log(props.keyAPI)\r\n    return (\r\n        <div className={'right-side'}>\r\n            <Button ghost onClick={() => {\r\n                setClick(!click)\r\n            }}> Press me! </Button>\r\n            {click && <p> {i18n.JOKE}</p>}\r\n            <GoogleMap\r\n                keyAPI={props.keyAPI}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nRightSide.propTypes = {\r\n    weather: PropTypes.array,\r\n    keyAPI: PropTypes.string,\r\n}\r\n\r\nexport default RightSide\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport '../styles/LeftSideStyle.css'\r\nimport {getWeather} from \"../actions/action\";\r\nimport RightSide from \"../components/RightSide\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    keyAPI: state.keyAPI\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n      weather: () => dispatch(getWeather())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps ,mapDispatchToProps)(RightSide)\r\n","import React from 'react'\r\nimport LeftSide from \"../connectors/LeftSideConnector\";\r\nimport RightSide from \"../connectors/RightSideConnector\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <LeftSide/>\r\n            <RightSide/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport store from '../src/store/store'\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/index'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App/>\r\n        </Router>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n"],"sourceRoot":""}